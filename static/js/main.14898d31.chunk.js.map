{"version":3,"sources":["routes/Cenas.js","routes/Animation.js","routes/Login.js","App.js","serviceWorker.js","index.js"],"names":["scenes","scene1","scene","THREE","camera","window","innerWidth","innerHeight","renderer","setSize","document","getElementById","appendChild","domElement","geometry","material","color","cube","add","position","z","animate","requestAnimationFrame","rotation","x","y","render","scene2","onMouseWheel","event","preventDefault","deltaY","console","log","clampScalar","onWindowResize","aspect","updateProjectionMatrix","set","map","load","i","mesh","antialias","setPixelRatio","devicePixelRatio","setClearColor","addEventListener","init","Animation","id","Component","Login","action","htmlFor","type","name","to","App","className","path","Boolean","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.14898d31.chunk.js","sourcesContent":["import * as THREE from 'three';\r\n\r\nconst scenes = {\r\n    scene1() {\r\n        var scene = new THREE.Scene();\r\n        var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n        var renderer = new THREE.WebGLRenderer();\r\n        renderer.setSize(window.innerWidth - 200, window.innerHeight - 200);\r\n        document.getElementById('canvas').appendChild(renderer.domElement);\r\n        var geometry = new THREE.BoxGeometry(1, 1, 1);\r\n        var material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\r\n        var cube = new THREE.Mesh(geometry, material);\r\n        scene.add(cube);\r\n        camera.position.z = 5;\r\n        var animate = function () {\r\n            requestAnimationFrame(animate);\r\n            cube.rotation.x += 0.01;\r\n            cube.rotation.y += 0.01;\r\n            renderer.render(scene, camera);\r\n        }\r\n\r\n        animate();\r\n    }, scene2() {\r\n        let camera, scene, renderer;\r\n\r\n        init();\r\n        animate();\r\n\r\n        function init() {\r\n            camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 0.01, 10);\r\n            camera.position.set(0, 5, 2);\r\n\r\n            scene = new THREE.Scene();\r\n            \r\n\r\n            const geometry = new THREE.PlaneGeometry(.5, .5);\r\n            const material = new THREE.MeshBasicMaterial({ map: new THREE.TextureLoader().load('mega-hack-3/loliWisky.jpg') });\r\n\r\n            // generate some boxes in a column\r\n\r\n            for (let i = 0; i <= 10; i++) {\r\n\r\n                const mesh = new THREE.Mesh(geometry, material);\r\n                mesh.position.y = i;\r\n                scene.add(mesh);\r\n\r\n            }\r\n\r\n            // instantiate a loader\r\n            // load a image resource\r\n            // var img = new THREE.MeshBasicMaterial({map: new THREE.TextureLoader().load( './textures/loliWisky.jpg' )});\r\n            // img.map.needsUpdate = true; //ADDED\r\n            // var plane = new THREE.Mesh(new THREE.PlaneGeometry(200, 200), img);\r\n            // plane.overdraw = true;\r\n            // scene.add(plane);\r\n\r\n            renderer = new THREE.WebGLRenderer({ antialias: true });\r\n            renderer.setPixelRatio(window.devicePixelRatio);\r\n            renderer.setSize(window.innerWidth, window.innerHeight);\r\n            document.getElementById('canvas').appendChild(renderer.domElement);\r\n            renderer.setClearColor(0x4169E1)\r\n            window.addEventListener('wheel', onMouseWheel, false);\r\n            window.addEventListener('resize', onWindowResize, false);\r\n\r\n        }\r\n\r\n        function animate() {\r\n\r\n            requestAnimationFrame(animate);\r\n            renderer.render(scene, camera);\r\n\r\n        }\r\n\r\n        function onMouseWheel(event) {\r\n\r\n            event.preventDefault();\r\n\r\n            \r\n            camera.position.y -= event.deltaY * 0.005;\r\n            console.log(camera.position.y );\r\n            // prevent scrolling beyond a min/max value\r\n\r\n            camera.position.clampScalar(0, 10);\r\n\r\n        }\r\n\r\n        function onWindowResize() {\r\n\r\n            camera.aspect = window.innerWidth / window.innerHeight;\r\n            camera.updateProjectionMatrix();\r\n            renderer.setSize(window.innerWidth, window.innerHeight);\r\n\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default scenes;","import React, { Component } from 'react';\r\nimport scenes from './Cenas';\r\n\r\nexport default class Animation extends Component {\r\n    componentDidMount() {\r\n        scenes.scene2();\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div id='webgl'></div>\r\n                <div id=\"canvas\" />\r\n                <div id=\"container\">\r\n\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport {Link} from 'react-router-dom'\r\n\r\nexport default class Login extends Component {\r\n    render() {\r\n        return (\r\n            <form action=\"\">\r\n                <label htmlFor=\"\">\r\n                    Usu√°rio\r\n                <input type=\"text\" />\r\n                </label>\r\n                <label htmlFor=\"\">\r\n                    Senha:\r\n                <input type=\"password\" name=\"\" id=\"\" />\r\n                </label>\r\n                <button type=\"submit\">Login</button>\r\n                <Link to=\"/mega-hack-3/anima\">Pass</Link>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Animation from './routes/Animation.js';\r\nimport Login from './routes/Login.js';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n} from \"react-router-dom\";\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <Switch>\r\n            <Route path=\"/mega-hack-3/anima\">\r\n              <Animation />\r\n            </Route>\r\n            <Route path=\"/\">\r\n              <Login />\r\n            </Route>\r\n          </Switch>\r\n        </header>\r\n      </div>\r\n      </Router >\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}